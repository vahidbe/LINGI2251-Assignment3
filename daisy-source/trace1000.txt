JavaPathfinder core system v8.0 (rev 7e63ebf36369f63a1ddfac7374e7defeb948c8fe) - (C) 2005-2014 United States Government. All rights reserved.


====================================================== system under test
DaisyTest.main()

====================================================== search started: 5/16/21 2:57 PM

====================================================== error 1
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
java.lang.AssertionError
	at DaisyUserThread.run(DaisyUserThread.java:83)


====================================================== trace #1
------------------------------------------------------ transition #0 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"ROOT" ,1/1,isCascaded:false}
      [3168 insn w/o sources]
  DaisyTest.java:13              : public class DaisyTest {
      [2 insn w/o sources]
  DaisyTest.java:13              : public class DaisyTest {
  DaisyTest.java:1               : import daisy.*;
      [1 insn w/o sources]
  DaisyTest.java:27              : FileHandle root = new FileHandle();
  daisy/FileHandle.java:15       : public class FileHandle {
      [1 insn w/o sources]
  daisy/FileHandle.java:15       : public class FileHandle {
  DaisyTest.java:27              : FileHandle root = new FileHandle();
  DaisyTest.java:28              : root.inodenum = 0;
  DaisyTest.java:29              : FileHandle cowFileHandle = new FileHandle();
  daisy/FileHandle.java:15       : public class FileHandle {
      [1 insn w/o sources]
  daisy/FileHandle.java:15       : public class FileHandle {
  DaisyTest.java:29              : FileHandle cowFileHandle = new FileHandle();
  DaisyTest.java:30              : Petal.init(false);
      [1 insn w/o sources]
  daisy/Petal.java:23            : static private byte[] disk = null;
  daisy/Petal.java:1             : /*
  DaisyTest.java:30              : Petal.init(false);
  daisy/Petal.java:26            : disk = new byte[INITIAL_DISK_SIZE];
  daisy/Petal.java:27            : Daisy.init();
  daisy/Daisy.java:367           : byte b[] = { 0,0,0,0,0,0,0,0 };
  daisy/Daisy.java:368           : creat();
  daisy/Daisy.java:472           : Inode inode = ialloc();
  daisy/Daisy.java:346           : for(long i=0; i<MAXINODE; i++) {
  daisy/Daisy.java:347           : Inode p = iget(i);
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
      [1 insn w/o sources]
  daisy/Daisy.java:46            : private static Vector plocks = new Vector(0);
      [27 insn w/o sources]
  daisy/Daisy.java:46            : private static Vector plocks = new Vector(0);
  daisy/Daisy.java:47            : private static Mutex m = new Mutex(-1);
  daisy/Mutex.java:21            : public Mutex(int id) {
      [1 insn w/o sources]
  daisy/Mutex.java:22            : this.id = id;
  daisy/Mutex.java:23            : this.locked = false;
  daisy/Mutex.java:24            : }
  daisy/Daisy.java:47            : private static Mutex m = new Mutex(-1);
  daisy/Daisy.java:1             : /*
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:58            : m.acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:59            : if (lockno >= plocks.size()) {
      [3 insn w/o sources]
  daisy/Daisy.java:59            : if (lockno >= plocks.size()) {
  daisy/Daisy.java:60            : plocks.setSize((int)lockno + 100);
      [99 insn w/o sources]
  daisy/Daisy.java:62            : if (plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:62            : if (plocks.get((int)lockno) == null) {
  daisy/Daisy.java:63            : plocks.setElementAt(new Mutex((int)lockno), (int)lockno);
  daisy/Mutex.java:21            : public Mutex(int id) {
      [1 insn w/o sources]
  daisy/Mutex.java:22            : this.id = id;
  daisy/Mutex.java:23            : this.locked = false;
  daisy/Mutex.java:24            : }
  daisy/Daisy.java:63            : plocks.setElementAt(new Mutex((int)lockno), (int)lockno);
      [10 insn w/o sources]
  daisy/Daisy.java:65            : m.rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:84            : int oldLength = disk.length;
  daisy/Petal.java:85            : int newLength = oldLength * 2;
  daisy/Petal.java:86            : byte[] newDisk = new byte[newLength];
  daisy/Petal.java:87            : System.arraycopy(disk, 0, newDisk, 0, oldLength);
      [2 insn w/o sources]
  daisy/Petal.java:88            : disk = newDisk;
  daisy/Petal.java:89            : }
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:84            : int oldLength = disk.length;
  daisy/Petal.java:85            : int newLength = oldLength * 2;
  daisy/Petal.java:86            : byte[] newDisk = new byte[newLength];
  daisy/Petal.java:87            : System.arraycopy(disk, 0, newDisk, 0, oldLength);
      [2 insn w/o sources]
  daisy/Petal.java:88            : disk = newDisk;
  daisy/Petal.java:89            : }
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:84            : int oldLength = disk.length;
  daisy/Petal.java:85            : int newLength = oldLength * 2;
  daisy/Petal.java:86            : byte[] newDisk = new byte[newLength];
  daisy/Petal.java:87            : System.arraycopy(disk, 0, newDisk, 0, oldLength);
      [2 insn w/o sources]
  daisy/Petal.java:88            : disk = newDisk;
  daisy/Petal.java:89            : }
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:347           : Inode p = iget(i);
  daisy/Daisy.java:348           : if( !p.used ) {
  daisy/Daisy.java:349           : p.used = true;
  daisy/Daisy.java:351           : return p;
  daisy/Daisy.java:472           : Inode inode = ialloc();
  daisy/Daisy.java:473           : if( inode == null ) {
  daisy/Daisy.java:478           : long blockno = alloc();
  daisy/Daisy.java:388           : for(long i=0; i<MAXBLOCK; i++) {
  daisy/Daisy.java:389           : DaisyLock.acqb(i);
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:58            : m.acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:59            : if (lockno >= plocks.size()) {
      [3 insn w/o sources]
  daisy/Daisy.java:59            : if (lockno >= plocks.size()) {
  daisy/Daisy.java:62            : if (plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:62            : if (plocks.get((int)lockno) == null) {
  daisy/Daisy.java:63            : plocks.setElementAt(new Mutex((int)lockno), (int)lockno);
  daisy/Mutex.java:21            : public Mutex(int id) {
      [1 insn w/o sources]
  daisy/Mutex.java:22            : this.id = id;
  daisy/Mutex.java:23            : this.locked = false;
  daisy/Mutex.java:24            : }
  daisy/Daisy.java:63            : plocks.setElementAt(new Mutex((int)lockno), (int)lockno);
      [10 insn w/o sources]
  daisy/Daisy.java:65            : m.rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:390           : if( DaisyDisk.readAllocBit(i) == false ) {
  daisy/Daisy.java:254           : return (Petal.read( STARTALLOCAREA+blockno/8 ) &  (1<<(blockno & 7))) != 0;
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:84            : int oldLength = disk.length;
  daisy/Petal.java:85            : int newLength = oldLength * 2;
  daisy/Petal.java:86            : byte[] newDisk = new byte[newLength];
  daisy/Petal.java:87            : System.arraycopy(disk, 0, newDisk, 0, oldLength);
      [2 insn w/o sources]
  daisy/Petal.java:88            : disk = newDisk;
  daisy/Petal.java:89            : }
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:84            : int oldLength = disk.length;
  daisy/Petal.java:85            : int newLength = oldLength * 2;
  daisy/Petal.java:86            : byte[] newDisk = new byte[newLength];
  daisy/Petal.java:87            : System.arraycopy(disk, 0, newDisk, 0, oldLength);
      [2 insn w/o sources]
  daisy/Petal.java:88            : disk = newDisk;
  daisy/Petal.java:89            : }
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:84            : int oldLength = disk.length;
  daisy/Petal.java:85            : int newLength = oldLength * 2;
  daisy/Petal.java:86            : byte[] newDisk = new byte[newLength];
  daisy/Petal.java:87            : System.arraycopy(disk, 0, newDisk, 0, oldLength);
      [2 insn w/o sources]
  daisy/Petal.java:88            : disk = newDisk;
  daisy/Petal.java:89            : }
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:84            : int oldLength = disk.length;
  daisy/Petal.java:85            : int newLength = oldLength * 2;
  daisy/Petal.java:86            : byte[] newDisk = new byte[newLength];
  daisy/Petal.java:87            : System.arraycopy(disk, 0, newDisk, 0, oldLength);
      [2 insn w/o sources]
  daisy/Petal.java:88            : disk = newDisk;
  daisy/Petal.java:89            : }
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:84            : int oldLength = disk.length;
  daisy/Petal.java:85            : int newLength = oldLength * 2;
  daisy/Petal.java:86            : byte[] newDisk = new byte[newLength];
  daisy/Petal.java:87            : System.arraycopy(disk, 0, newDisk, 0, oldLength);
      [2 insn w/o sources]
  daisy/Petal.java:88            : disk = newDisk;
  daisy/Petal.java:89            : }
  daisy/Petal.java:62            : resizeDisk();
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:254           : return (Petal.read( STARTALLOCAREA+blockno/8 ) &  (1<<(blockno & 7))) != 0;
  daisy/Daisy.java:390           : if( DaisyDisk.readAllocBit(i) == false ) {
  daisy/Daisy.java:391           : DaisyDisk.writeAllocBit( i, true );
  daisy/Daisy.java:262           : byte b = Petal.read( STARTALLOCAREA+blockno/8 );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:262           : byte b = Petal.read( STARTALLOCAREA+blockno/8 );
  daisy/Daisy.java:263           : byte mask = (byte)(1<<(blockno & 7));
  daisy/Daisy.java:264           : b = bit ? (byte)(b | mask) : (byte)(b & ~mask);
  daisy/Daisy.java:265           : Petal.write( STARTALLOCAREA+blockno/8, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:266           : } //@ nowarn Post
  daisy/Daisy.java:392           : DaisyLock.relb(i);
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:394           : return i;
  daisy/Daisy.java:478           : long blockno = alloc();
  daisy/Daisy.java:479           : if( blockno == -1 ) {
  daisy/Daisy.java:485           : inode.blockno = blockno;
  daisy/Daisy.java:486           : inode.size = 0;
  daisy/Daisy.java:487           : iput(inode);
  daisy/Daisy.java:326           : DaisyDisk.writei(inode);
  daisy/Daisy.java:238           : Petal.writeLong(STARTINODEAREA +
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:72            : }
  daisy/Daisy.java:240           : Petal.writeLong(STARTINODEAREA +
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:72            : }
  daisy/Daisy.java:242           : Petal.write(STARTINODEAREA +
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:245           : } //@ nowarn Post
  daisy/Daisy.java:327           : DaisyLock.reli(inode.inodenum);
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:328           : }
  daisy/Daisy.java:489           : return inode.inodenum;
  daisy/Daisy.java:368           : creat();
  daisy/Daisy.java:370           : }
  daisy/Petal.java:28            : }
  DaisyTest.java:32              : FileHandle[] fileHandles = new FileHandle[FILECOUNT];
  DaisyTest.java:33              : for(int i = 0; i < fileHandles.length; i++) {
  DaisyTest.java:34              : fileHandles[i] = new FileHandle();
  daisy/FileHandle.java:15       : public class FileHandle {
      [1 insn w/o sources]
  daisy/FileHandle.java:15       : public class FileHandle {
  DaisyTest.java:34              : fileHandles[i] = new FileHandle();
  DaisyTest.java:33              : for(int i = 0; i < fileHandles.length; i++) {
  DaisyTest.java:36              : byte[][] filenames = new byte[FILECOUNT][];
  DaisyTest.java:37              : filenames[0] = stringToBytes("cow");
  DaisyTest.java:65              : byte b[] = new byte[s.length()];
      [4 insn w/o sources]
  DaisyTest.java:65              : byte b[] = new byte[s.length()];
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
      [4 insn w/o sources]
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
      [2 insn w/o sources]
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
      [4 insn w/o sources]
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
      [2 insn w/o sources]
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
      [4 insn w/o sources]
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
      [2 insn w/o sources]
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
      [4 insn w/o sources]
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
  DaisyTest.java:69              : return b;
  DaisyTest.java:37              : filenames[0] = stringToBytes("cow");
  DaisyTest.java:38              : int status = 0;
  DaisyTest.java:39              : for(int i = 0; i < filenames.length; i++) {
  DaisyTest.java:40              : status = DaisyDir.creat(root, filenames[i], fileHandles[i]);
  daisy/DaisyDir.java:169        : Directory d = new Directory();
  daisy/DaisyDir.java:28         : class Directory {
      [1 insn w/o sources]
  daisy/DaisyDir.java:32         : public DirectoryEntry entries[] = new DirectoryEntry[DIRSIZE];
  daisy/DaisyDir.java:169        : Directory d = new Directory();
  daisy/DaisyDir.java:171        : int res = DaisyDir.openDirectory(dir, d);
  daisy/DaisyDir.java:85         : Attribute a = new Attribute();
  daisy/Attribute.java:15        : public class Attribute {
      [1 insn w/o sources]
  daisy/Attribute.java:15        : public class Attribute {
  daisy/DaisyDir.java:85         : Attribute a = new Attribute();
  daisy/DaisyDir.java:90         : DaisyLock.lock_file(dir.inodenum);
  daisy/Daisy.java:178           : LockManager.acq(STARTFILELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:58            : m.acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:59            : if (lockno >= plocks.size()) {
      [3 insn w/o sources]
  daisy/Daisy.java:59            : if (lockno >= plocks.size()) {
  daisy/Daisy.java:62            : if (plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:62            : if (plocks.get((int)lockno) == null) {
  daisy/Daisy.java:63            : plocks.setElementAt(new Mutex((int)lockno), (int)lockno);
  daisy/Mutex.java:21            : public Mutex(int id) {
      [1 insn w/o sources]
  daisy/Mutex.java:22            : this.id = id;
  daisy/Mutex.java:23            : this.locked = false;
  daisy/Mutex.java:24            : }
  daisy/Daisy.java:63            : plocks.setElementAt(new Mutex((int)lockno), (int)lockno);
      [10 insn w/o sources]
  daisy/Daisy.java:65            : m.rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/DaisyDir.java:91         : d.file = dir;
  daisy/DaisyDir.java:92         : res = Daisy.get_attr(dir.inodenum, a);
  daisy/Daisy.java:523           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:527           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:527           : Inode inode = iget( inodenum );
  daisy/Daisy.java:528           : if (inode == null) {
  daisy/Daisy.java:531           : if (!inode.used) {
  daisy/Daisy.java:535           : get_attr(inode, a);
  daisy/Daisy.java:439           : a.size = inode.size;
  daisy/Daisy.java:440           : }
  daisy/Daisy.java:536           : DaisyLock.reli (inodenum);
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:537           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:92         : res = Daisy.get_attr(dir.inodenum, a);
  daisy/DaisyDir.java:93         : if (res != Daisy.DAISY_ERR_OK) {
  daisy/DaisyDir.java:97         : d.size = a.size / DirectoryEntry.ENTRYSIZE;
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:99         : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:110        : return Daisy.DAISY_ERR_OK;
  daisy/DaisyDir.java:171        : int res = DaisyDir.openDirectory(dir, d);
  daisy/DaisyDir.java:173        : if (res != Daisy.DAISY_ERR_OK) {
  daisy/DaisyDir.java:178        : int new_entry = (int)d.size;
  daisy/DaisyDir.java:179        : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:191        : if (new_entry == Directory.DIRSIZE) {
  daisy/DaisyDir.java:196        : long inodenum = Daisy.creat();
  daisy/Daisy.java:472           : Inode inode = ialloc();
  daisy/Daisy.java:346           : for(long i=0; i<MAXINODE; i++) {
  daisy/Daisy.java:347           : Inode p = iget(i);
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:347           : Inode p = iget(i);
  daisy/Daisy.java:348           : if( !p.used ) {
  daisy/Daisy.java:353           : DaisyLock.reli(i);
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:346           : for(long i=0; i<MAXINODE; i++) {
  daisy/Daisy.java:347           : Inode p = iget(i);
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:58            : m.acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:59            : if (lockno >= plocks.size()) {
      [3 insn w/o sources]
  daisy/Daisy.java:59            : if (lockno >= plocks.size()) {
  daisy/Daisy.java:62            : if (plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:62            : if (plocks.get((int)lockno) == null) {
  daisy/Daisy.java:63            : plocks.setElementAt(new Mutex((int)lockno), (int)lockno);
  daisy/Mutex.java:21            : public Mutex(int id) {
      [1 insn w/o sources]
  daisy/Mutex.java:22            : this.id = id;
  daisy/Mutex.java:23            : this.locked = false;
  daisy/Mutex.java:24            : }
  daisy/Daisy.java:63            : plocks.setElementAt(new Mutex((int)lockno), (int)lockno);
      [10 insn w/o sources]
  daisy/Daisy.java:65            : m.rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:347           : Inode p = iget(i);
  daisy/Daisy.java:348           : if( !p.used ) {
  daisy/Daisy.java:349           : p.used = true;
  daisy/Daisy.java:351           : return p;
  daisy/Daisy.java:472           : Inode inode = ialloc();
  daisy/Daisy.java:473           : if( inode == null ) {
  daisy/Daisy.java:478           : long blockno = alloc();
  daisy/Daisy.java:388           : for(long i=0; i<MAXBLOCK; i++) {
  daisy/Daisy.java:389           : DaisyLock.acqb(i);
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:390           : if( DaisyDisk.readAllocBit(i) == false ) {
  daisy/Daisy.java:254           : return (Petal.read( STARTALLOCAREA+blockno/8 ) &  (1<<(blockno & 7))) != 0;
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:254           : return (Petal.read( STARTALLOCAREA+blockno/8 ) &  (1<<(blockno & 7))) != 0;
  daisy/Daisy.java:390           : if( DaisyDisk.readAllocBit(i) == false ) {
  daisy/Daisy.java:396           : DaisyLock.relb(i);
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:388           : for(long i=0; i<MAXBLOCK; i++) {
  daisy/Daisy.java:389           : DaisyLock.acqb(i);
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:58            : m.acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:59            : if (lockno >= plocks.size()) {
      [3 insn w/o sources]
  daisy/Daisy.java:59            : if (lockno >= plocks.size()) {
  daisy/Daisy.java:62            : if (plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:62            : if (plocks.get((int)lockno) == null) {
  daisy/Daisy.java:63            : plocks.setElementAt(new Mutex((int)lockno), (int)lockno);
  daisy/Mutex.java:21            : public Mutex(int id) {
      [1 insn w/o sources]
  daisy/Mutex.java:22            : this.id = id;
  daisy/Mutex.java:23            : this.locked = false;
  daisy/Mutex.java:24            : }
  daisy/Daisy.java:63            : plocks.setElementAt(new Mutex((int)lockno), (int)lockno);
      [10 insn w/o sources]
  daisy/Daisy.java:65            : m.rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:390           : if( DaisyDisk.readAllocBit(i) == false ) {
  daisy/Daisy.java:254           : return (Petal.read( STARTALLOCAREA+blockno/8 ) &  (1<<(blockno & 7))) != 0;
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:254           : return (Petal.read( STARTALLOCAREA+blockno/8 ) &  (1<<(blockno & 7))) != 0;
  daisy/Daisy.java:390           : if( DaisyDisk.readAllocBit(i) == false ) {
  daisy/Daisy.java:391           : DaisyDisk.writeAllocBit( i, true );
  daisy/Daisy.java:262           : byte b = Petal.read( STARTALLOCAREA+blockno/8 );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:262           : byte b = Petal.read( STARTALLOCAREA+blockno/8 );
  daisy/Daisy.java:263           : byte mask = (byte)(1<<(blockno & 7));
  daisy/Daisy.java:264           : b = bit ? (byte)(b | mask) : (byte)(b & ~mask);
  daisy/Daisy.java:265           : Petal.write( STARTALLOCAREA+blockno/8, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:266           : } //@ nowarn Post
  daisy/Daisy.java:392           : DaisyLock.relb(i);
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:394           : return i;
  daisy/Daisy.java:478           : long blockno = alloc();
  daisy/Daisy.java:479           : if( blockno == -1 ) {
  daisy/Daisy.java:485           : inode.blockno = blockno;
  daisy/Daisy.java:486           : inode.size = 0;
  daisy/Daisy.java:487           : iput(inode);
  daisy/Daisy.java:326           : DaisyDisk.writei(inode);
  daisy/Daisy.java:238           : Petal.writeLong(STARTINODEAREA +
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:72            : }
  daisy/Daisy.java:240           : Petal.writeLong(STARTINODEAREA +
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:72            : }
  daisy/Daisy.java:242           : Petal.write(STARTINODEAREA +
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:245           : } //@ nowarn Post
  daisy/Daisy.java:327           : DaisyLock.reli(inode.inodenum);
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:328           : }
  daisy/Daisy.java:489           : return inode.inodenum;
  daisy/DaisyDir.java:196        : long inodenum = Daisy.creat();
  daisy/DaisyDir.java:197        : if (inodenum < 0) {
  daisy/DaisyDir.java:203        : d.entries[new_entry] = new DirectoryEntry();
  daisy/DaisyDir.java:15         : class DirectoryEntry {
      [1 insn w/o sources]
  daisy/DaisyDir.java:15         : class DirectoryEntry {
  daisy/DaisyDir.java:203        : d.entries[new_entry] = new DirectoryEntry();
  daisy/DaisyDir.java:204        : d.entries[new_entry].inodenum = inodenum;
  daisy/DaisyDir.java:205        : d.entries[new_entry].filename = filename;
  daisy/DaisyDir.java:207        : fh.inodenum = inodenum;
  daisy/DaisyDir.java:209        : if (new_entry == d.size) {
  daisy/DaisyDir.java:210        : d.size++;
  daisy/DaisyDir.java:214        : return DaisyDir.closeDirectory(d);
  daisy/DaisyDir.java:122        : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:123        : DaisyDir.writeLong(d.file.inodenum,
  daisy/DaisyDir.java:55         : byte b[] = new byte[8];
  daisy/DaisyDir.java:56         : Utility.longToBytes(n, b, 0);
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:21          : }
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/Daisy.java:585           : if (offset + size > BLOCKSIZE) {
  daisy/Daisy.java:588           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:593           : if (!inode.used) {
  daisy/Daisy.java:597           : write(inode, offset, size, b);
  daisy/Daisy.java:423           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:424           : long blk = inode.blockno;
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:430           : if( inode.size < offset + size) {
  daisy/Daisy.java:431           : inode.size = offset + size;
  daisy/Daisy.java:432           : DaisyDisk.writei(inode);
  daisy/Daisy.java:238           : Petal.writeLong(STARTINODEAREA +
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:72            : }
  daisy/Daisy.java:240           : Petal.writeLong(STARTINODEAREA +
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:72            : }
  daisy/Daisy.java:242           : Petal.write(STARTINODEAREA +
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:245           : } //@ nowarn Post
  daisy/Daisy.java:434           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:435           : }
  daisy/Daisy.java:598           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:599           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/DaisyDir.java:123        : DaisyDir.writeLong(d.file.inodenum,
  daisy/DaisyDir.java:55         : byte b[] = new byte[8];
  daisy/DaisyDir.java:56         : Utility.longToBytes(n, b, 0);
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:21          : }
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/Daisy.java:585           : if (offset + size > BLOCKSIZE) {
  daisy/Daisy.java:588           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:593           : if (!inode.used) {
  daisy/Daisy.java:597           : write(inode, offset, size, b);
  daisy/Daisy.java:423           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:424           : long blk = inode.blockno;
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:430           : if( inode.size < offset + size) {
  daisy/Daisy.java:431           : inode.size = offset + size;
  daisy/Daisy.java:432           : DaisyDisk.writei(inode);
  daisy/Daisy.java:238           : Petal.writeLong(STARTINODEAREA +
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:72            : }
  daisy/Daisy.java:240           : Petal.writeLong(STARTINODEAREA +
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:72            : }
  daisy/Daisy.java:242           : Petal.write(STARTINODEAREA +
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:245           : } //@ nowarn Post
  daisy/Daisy.java:434           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:435           : }
  daisy/Daisy.java:598           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:599           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/DaisyDir.java:126        : DaisyDir.writeLong(d.file.inodenum,
  daisy/DaisyDir.java:129        : byte[] b = new byte[DirectoryEntry.MAXNAMESIZE];
  daisy/DaisyDir.java:130        : System.arraycopy(d.entries[i].filename, 0, b, 0, d.entries[i].filename.length);
      [2 insn w/o sources]
  daisy/DaisyDir.java:131        : DaisyDir.write(d.file,
  daisy/DaisyDir.java:290        : return Daisy.write(file.inodenum, offset, size, b);
  daisy/Daisy.java:585           : if (offset + size > BLOCKSIZE) {
  daisy/Daisy.java:588           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:593           : if (!inode.used) {
  daisy/Daisy.java:597           : write(inode, offset, size, b);
  daisy/Daisy.java:423           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:424           : long blk = inode.blockno;
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:430           : if( inode.size < offset + size) {
  daisy/Daisy.java:431           : inode.size = offset + size;
  daisy/Daisy.java:432           : DaisyDisk.writei(inode);
  daisy/Daisy.java:238           : Petal.writeLong(STARTINODEAREA +
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:72            : }
  daisy/Daisy.java:240           : Petal.writeLong(STARTINODEAREA +
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:72            : }
  daisy/Daisy.java:242           : Petal.write(STARTINODEAREA +
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:245           : } //@ nowarn Post
  daisy/Daisy.java:434           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:435           : }
  daisy/Daisy.java:598           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:599           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:290        : return Daisy.write(file.inodenum, offset, size, b);
  daisy/DaisyDir.java:131        : DaisyDir.write(d.file,
  daisy/DaisyDir.java:122        : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:136        : DaisyLock.unlock_file(d.file.inodenum);
  daisy/Daisy.java:188           : LockManager.rel(STARTFILELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/DaisyDir.java:137        : return Daisy.DAISY_ERR_OK;
  daisy/DaisyDir.java:214        : return DaisyDir.closeDirectory(d);
  DaisyTest.java:40              : status = DaisyDir.creat(root, filenames[i], fileHandles[i]);
  DaisyTest.java:41              : assert status == 0;
  DaisyTest.java:42              : byte[] data = stringToBytes("someData");
  DaisyTest.java:65              : byte b[] = new byte[s.length()];
      [4 insn w/o sources]
  DaisyTest.java:65              : byte b[] = new byte[s.length()];
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
      [4 insn w/o sources]
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
      [2 insn w/o sources]
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
      [4 insn w/o sources]
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
      [2 insn w/o sources]
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
      [4 insn w/o sources]
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
      [2 insn w/o sources]
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
      [4 insn w/o sources]
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
      [2 insn w/o sources]
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
      [4 insn w/o sources]
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
      [2 insn w/o sources]
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
      [4 insn w/o sources]
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
      [2 insn w/o sources]
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
      [4 insn w/o sources]
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
      [2 insn w/o sources]
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
      [4 insn w/o sources]
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
      [2 insn w/o sources]
  DaisyTest.java:67              : b[i] = (byte) s.charAt(i);
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
      [4 insn w/o sources]
  DaisyTest.java:66              : for (int i = 0; i < s.length(); i++) {
  DaisyTest.java:69              : return b;
  DaisyTest.java:42              : byte[] data = stringToBytes("someData");
  DaisyTest.java:43              : status = DaisyDir.write(fileHandles[i], 0, data.length, data);
  daisy/DaisyDir.java:290        : return Daisy.write(file.inodenum, offset, size, b);
  daisy/Daisy.java:585           : if (offset + size > BLOCKSIZE) {
  daisy/Daisy.java:588           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:593           : if (!inode.used) {
  daisy/Daisy.java:597           : write(inode, offset, size, b);
  daisy/Daisy.java:423           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:424           : long blk = inode.blockno;
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:430           : if( inode.size < offset + size) {
  daisy/Daisy.java:431           : inode.size = offset + size;
  daisy/Daisy.java:432           : DaisyDisk.writei(inode);
  daisy/Daisy.java:238           : Petal.writeLong(STARTINODEAREA +
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:72            : }
  daisy/Daisy.java:240           : Petal.writeLong(STARTINODEAREA +
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:72            : }
  daisy/Daisy.java:242           : Petal.write(STARTINODEAREA +
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:245           : } //@ nowarn Post
  daisy/Daisy.java:434           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:435           : }
  daisy/Daisy.java:598           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:599           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:290        : return Daisy.write(file.inodenum, offset, size, b);
  DaisyTest.java:43              : status = DaisyDir.write(fileHandles[i], 0, data.length, data);
  DaisyTest.java:44              : assert status == 0;
  DaisyTest.java:39              : for(int i = 0; i < filenames.length; i++) {
  DaisyTest.java:47              : System.out.println("Creating the DaisyUserThreads ...");
      [2 insn w/o sources]
  DaisyTest.java:48              : DaisyUserThread thread1 = new DaisyUserThread(DaisyUserThread.READ_OPERATION, ITERATIONS, filenames, root);
      [1 insn w/o sources]
  DaisyUserThread.java:15        : public class DaisyUserThread extends Thread {
      [2 insn w/o sources]
  DaisyUserThread.java:15        : public class DaisyUserThread extends Thread {
  DaisyUserThread.java:1         : import daisy.*;
  DaisyTest.java:48              : DaisyUserThread thread1 = new DaisyUserThread(DaisyUserThread.READ_OPERATION, ITERATIONS, filenames, root);
  DaisyUserThread.java:42        : public DaisyUserThread(int opCode, int iterations, byte[][] filenames, FileHandle root) {
      [145 insn w/o sources]
  DaisyUserThread.java:43        : this.iterations = iterations;
  DaisyUserThread.java:44        : this.filenames = filenames;
  DaisyUserThread.java:45        : this.root = root;
  DaisyUserThread.java:46        : if((opCode >= 0) && (opCode < MAX_OPERATIONS)) {
  DaisyUserThread.java:47        : this.opCode = opCode;
  DaisyUserThread.java:51        : random = new Random();
      [2 insn w/o sources]
  DaisyUserThread.java:51        : random = new Random();
  DaisyUserThread.java:52        : }
  DaisyTest.java:48              : DaisyUserThread thread1 = new DaisyUserThread(DaisyUserThread.READ_OPERATION, ITERATIONS, filenames, root);
  DaisyTest.java:49              : DaisyUserThread thread2 = new DaisyUserThread(DaisyUserThread.DELETE_OPERATION, ITERATIONS, filenames, root);
  DaisyUserThread.java:42        : public DaisyUserThread(int opCode, int iterations, byte[][] filenames, FileHandle root) {
      [145 insn w/o sources]
  DaisyUserThread.java:43        : this.iterations = iterations;
  DaisyUserThread.java:44        : this.filenames = filenames;
  DaisyUserThread.java:45        : this.root = root;
  DaisyUserThread.java:46        : if((opCode >= 0) && (opCode < MAX_OPERATIONS)) {
  DaisyUserThread.java:47        : this.opCode = opCode;
  DaisyUserThread.java:51        : random = new Random();
      [2 insn w/o sources]
  DaisyUserThread.java:51        : random = new Random();
  DaisyUserThread.java:52        : }
  DaisyTest.java:49              : DaisyUserThread thread2 = new DaisyUserThread(DaisyUserThread.DELETE_OPERATION, ITERATIONS, filenames, root);
  DaisyTest.java:50              : System.out.println("Starting the DaisyUserThreads ...");
      [2 insn w/o sources]
  DaisyTest.java:51              : thread1.start();
      [1 insn w/o sources]
------------------------------------------------------ transition #1 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  DaisyTest.java:52              : thread2.start();
      [1 insn w/o sources]
------------------------------------------------------ transition #2 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/3,isCascaded:false}
      [2 insn w/o sources]
  DaisyTest.java:55              : thread1.join();
      [1 insn w/o sources]
------------------------------------------------------ transition #3 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"JOIN" ,1/2,isCascaded:false}
      [1 insn w/o sources]
  DaisyUserThread.java:1         : import daisy.*;
  DaisyUserThread.java:55        : FileHandle fh = new FileHandle();
  daisy/FileHandle.java:15       : public class FileHandle {
      [1 insn w/o sources]
  daisy/FileHandle.java:15       : public class FileHandle {
  DaisyUserThread.java:55        : FileHandle fh = new FileHandle();
  DaisyUserThread.java:56        : Attribute a = null;
  DaisyUserThread.java:61        : for(int i = 0; i < iterations; i++) {
------------------------------------------------------ transition #4 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  DaisyUserThread.java:61        : for(int i = 0; i < iterations; i++) {
  DaisyUserThread.java:64        : if(opCode == RANDOM_OPERATION) {
------------------------------------------------------ transition #5 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  DaisyUserThread.java:64        : if(opCode == RANDOM_OPERATION) {
  DaisyUserThread.java:67        : operation = opCode;
------------------------------------------------------ transition #6 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  DaisyUserThread.java:67        : operation = opCode;
  DaisyUserThread.java:69        : int fileID = random.nextInt(filenames.length);
------------------------------------------------------ transition #7 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  DaisyUserThread.java:69        : int fileID = random.nextInt(filenames.length);
------------------------------------------------------ transition #8 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  DaisyUserThread.java:69        : int fileID = random.nextInt(filenames.length);
      [2 insn w/o sources]
  DaisyUserThread.java:69        : int fileID = random.nextInt(filenames.length);
  DaisyUserThread.java:70        : int lookupStatus = DaisyDir.lookup(root, filenames[fileID], fh);
------------------------------------------------------ transition #9 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  DaisyUserThread.java:70        : int lookupStatus = DaisyDir.lookup(root, filenames[fileID], fh);
------------------------------------------------------ transition #10 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  DaisyUserThread.java:70        : int lookupStatus = DaisyDir.lookup(root, filenames[fileID], fh);
------------------------------------------------------ transition #11 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  DaisyUserThread.java:70        : int lookupStatus = DaisyDir.lookup(root, filenames[fileID], fh);
  daisy/DaisyDir.java:250        : Directory d = new Directory();
  daisy/DaisyDir.java:28         : class Directory {
      [1 insn w/o sources]
  daisy/DaisyDir.java:32         : public DirectoryEntry entries[] = new DirectoryEntry[DIRSIZE];
  daisy/DaisyDir.java:250        : Directory d = new Directory();
  daisy/DaisyDir.java:251        : int res = DaisyDir.openDirectory(dir, d);
  daisy/DaisyDir.java:85         : Attribute a = new Attribute();
  daisy/Attribute.java:15        : public class Attribute {
      [1 insn w/o sources]
  daisy/Attribute.java:15        : public class Attribute {
  daisy/DaisyDir.java:85         : Attribute a = new Attribute();
  daisy/DaisyDir.java:90         : DaisyLock.lock_file(dir.inodenum);
------------------------------------------------------ transition #12 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/DaisyDir.java:90         : DaisyLock.lock_file(dir.inodenum);
  daisy/Daisy.java:178           : LockManager.acq(STARTFILELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #13 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #14 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #15 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #16 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #17 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #18 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #19 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #20 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #21 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #22 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #23 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #24 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #25 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #26 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/2,isCascaded:false}
      [1 insn w/o sources]
  DaisyUserThread.java:1         : import daisy.*;
  DaisyUserThread.java:55        : FileHandle fh = new FileHandle();
  daisy/FileHandle.java:15       : public class FileHandle {
      [1 insn w/o sources]
  daisy/FileHandle.java:15       : public class FileHandle {
  DaisyUserThread.java:55        : FileHandle fh = new FileHandle();
  DaisyUserThread.java:56        : Attribute a = null;
  DaisyUserThread.java:61        : for(int i = 0; i < iterations; i++) {
------------------------------------------------------ transition #27 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  DaisyUserThread.java:61        : for(int i = 0; i < iterations; i++) {
  DaisyUserThread.java:64        : if(opCode == RANDOM_OPERATION) {
------------------------------------------------------ transition #28 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  DaisyUserThread.java:64        : if(opCode == RANDOM_OPERATION) {
  DaisyUserThread.java:67        : operation = opCode;
------------------------------------------------------ transition #29 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  DaisyUserThread.java:67        : operation = opCode;
  DaisyUserThread.java:69        : int fileID = random.nextInt(filenames.length);
------------------------------------------------------ transition #30 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  DaisyUserThread.java:69        : int fileID = random.nextInt(filenames.length);
------------------------------------------------------ transition #31 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  DaisyUserThread.java:69        : int fileID = random.nextInt(filenames.length);
      [2 insn w/o sources]
  DaisyUserThread.java:69        : int fileID = random.nextInt(filenames.length);
  DaisyUserThread.java:70        : int lookupStatus = DaisyDir.lookup(root, filenames[fileID], fh);
------------------------------------------------------ transition #32 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  DaisyUserThread.java:70        : int lookupStatus = DaisyDir.lookup(root, filenames[fileID], fh);
------------------------------------------------------ transition #33 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  DaisyUserThread.java:70        : int lookupStatus = DaisyDir.lookup(root, filenames[fileID], fh);
------------------------------------------------------ transition #34 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/2,isCascaded:false}
  DaisyUserThread.java:70        : int lookupStatus = DaisyDir.lookup(root, filenames[fileID], fh);
  daisy/DaisyDir.java:250        : Directory d = new Directory();
  daisy/DaisyDir.java:28         : class Directory {
      [1 insn w/o sources]
  daisy/DaisyDir.java:32         : public DirectoryEntry entries[] = new DirectoryEntry[DIRSIZE];
  daisy/DaisyDir.java:250        : Directory d = new Directory();
  daisy/DaisyDir.java:251        : int res = DaisyDir.openDirectory(dir, d);
  daisy/DaisyDir.java:85         : Attribute a = new Attribute();
  daisy/Attribute.java:15        : public class Attribute {
      [1 insn w/o sources]
  daisy/Attribute.java:15        : public class Attribute {
  daisy/DaisyDir.java:85         : Attribute a = new Attribute();
  daisy/DaisyDir.java:90         : DaisyLock.lock_file(dir.inodenum);
------------------------------------------------------ transition #35 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  daisy/DaisyDir.java:90         : DaisyLock.lock_file(dir.inodenum);
  daisy/Daisy.java:178           : LockManager.acq(STARTFILELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #36 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #37 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #38 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #39 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #40 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #41 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #42 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #43 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #44 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #45 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #46 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #47 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #48 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #49 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
------------------------------------------------------ transition #50 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"RELEASE" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #51 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:30            : this.wait();
      [1 insn w/o sources]
------------------------------------------------------ transition #52 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"WAIT" ,1/1,isCascaded:false}
  daisy/Mutex.java:36            : }
  daisy/DaisyDir.java:91         : d.file = dir;
  daisy/DaisyDir.java:92         : res = Daisy.get_attr(dir.inodenum, a);
  daisy/Daisy.java:523           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:527           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:527           : Inode inode = iget( inodenum );
  daisy/Daisy.java:528           : if (inode == null) {
  daisy/Daisy.java:531           : if (!inode.used) {
  daisy/Daisy.java:535           : get_attr(inode, a);
  daisy/Daisy.java:439           : a.size = inode.size;
  daisy/Daisy.java:440           : }
  daisy/Daisy.java:536           : DaisyLock.reli (inodenum);
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:537           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:92         : res = Daisy.get_attr(dir.inodenum, a);
  daisy/DaisyDir.java:93         : if (res != Daisy.DAISY_ERR_OK) {
  daisy/DaisyDir.java:97         : d.size = a.size / DirectoryEntry.ENTRYSIZE;
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:99         : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:100        : d.entries[i] = new DirectoryEntry();
  daisy/DaisyDir.java:15         : class DirectoryEntry {
      [1 insn w/o sources]
  daisy/DaisyDir.java:15         : class DirectoryEntry {
  daisy/DaisyDir.java:100        : d.entries[i] = new DirectoryEntry();
  daisy/DaisyDir.java:101        : d.entries[i].inodenum =
  daisy/DaisyDir.java:102        : DaisyDir.readLong(dir.inodenum, i * DirectoryEntry.ENTRYSIZE);
  daisy/DaisyDir.java:49         : byte b[] = new byte[8];
  daisy/DaisyDir.java:50         : int x = Daisy.read(inodenum, offset, 8, b);
  daisy/Daisy.java:564           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:569           : if (!inode.used) {
  daisy/Daisy.java:573           : read(inode, offset, size, b);
  daisy/Daisy.java:412           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:413           : long blk = inode.blockno;
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:418           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:419           : }
  daisy/Daisy.java:574           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:575           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:50         : int x = Daisy.read(inodenum, offset, 8, b);
  daisy/DaisyDir.java:51         : return Utility.bytesToLong(b, 0);
  daisy/Utility.java:24          : long n = 0;
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:28          : return n;
  daisy/DaisyDir.java:51         : return Utility.bytesToLong(b, 0);
  daisy/DaisyDir.java:102        : DaisyDir.readLong(dir.inodenum, i * DirectoryEntry.ENTRYSIZE);
  daisy/DaisyDir.java:104        : int namesize =
  daisy/DaisyDir.java:105        : (int) DaisyDir.readLong(dir.inodenum, i * DirectoryEntry.ENTRYSIZE + 8);
  daisy/DaisyDir.java:49         : byte b[] = new byte[8];
  daisy/DaisyDir.java:50         : int x = Daisy.read(inodenum, offset, 8, b);
  daisy/Daisy.java:564           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:569           : if (!inode.used) {
  daisy/Daisy.java:573           : read(inode, offset, size, b);
  daisy/Daisy.java:412           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:413           : long blk = inode.blockno;
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:418           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:419           : }
  daisy/Daisy.java:574           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:575           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:50         : int x = Daisy.read(inodenum, offset, 8, b);
  daisy/DaisyDir.java:51         : return Utility.bytesToLong(b, 0);
  daisy/Utility.java:24          : long n = 0;
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:28          : return n;
  daisy/DaisyDir.java:51         : return Utility.bytesToLong(b, 0);
  daisy/DaisyDir.java:105        : (int) DaisyDir.readLong(dir.inodenum, i * DirectoryEntry.ENTRYSIZE + 8);
  daisy/DaisyDir.java:106        : byte[] b = new byte[namesize];
  daisy/DaisyDir.java:107        : DaisyDir.read(dir, i * DirectoryEntry.ENTRYSIZE + 16, namesize, b);
  daisy/DaisyDir.java:297        : return Daisy.read(file.inodenum, offset, size, b);
  daisy/Daisy.java:564           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:569           : if (!inode.used) {
  daisy/Daisy.java:573           : read(inode, offset, size, b);
  daisy/Daisy.java:412           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:413           : long blk = inode.blockno;
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:418           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:419           : }
  daisy/Daisy.java:574           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:575           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:297        : return Daisy.read(file.inodenum, offset, size, b);
  daisy/DaisyDir.java:107        : DaisyDir.read(dir, i * DirectoryEntry.ENTRYSIZE + 16, namesize, b);
  daisy/DaisyDir.java:108        : d.entries[i].filename = b;
  daisy/DaisyDir.java:99         : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:110        : return Daisy.DAISY_ERR_OK;
  daisy/DaisyDir.java:251        : int res = DaisyDir.openDirectory(dir, d);
  daisy/DaisyDir.java:252        : if (res != Daisy.DAISY_ERR_OK) {
  daisy/DaisyDir.java:255        : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:256        : if (d.entries[i].inodenum != -1 &&
  daisy/DaisyDir.java:257        : names_equal(filename, d.entries[i].filename)) {
  daisy/DaisyDir.java:41         : if (a.length != b.length) return false;
  daisy/DaisyDir.java:42         : for (int i = 0; i < a.length; i++) {
  daisy/DaisyDir.java:43         : if (a[i] != b[i]) return false;
  daisy/DaisyDir.java:42         : for (int i = 0; i < a.length; i++) {
  daisy/DaisyDir.java:43         : if (a[i] != b[i]) return false;
  daisy/DaisyDir.java:42         : for (int i = 0; i < a.length; i++) {
  daisy/DaisyDir.java:43         : if (a[i] != b[i]) return false;
  daisy/DaisyDir.java:42         : for (int i = 0; i < a.length; i++) {
  daisy/DaisyDir.java:45         : return true;
  daisy/DaisyDir.java:257        : names_equal(filename, d.entries[i].filename)) {
  daisy/DaisyDir.java:258        : fh.inodenum = d.entries[i].inodenum;
  daisy/DaisyDir.java:259        : return DaisyDir.closeDirectory(d);
  daisy/DaisyDir.java:122        : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:123        : DaisyDir.writeLong(d.file.inodenum,
  daisy/DaisyDir.java:55         : byte b[] = new byte[8];
  daisy/DaisyDir.java:56         : Utility.longToBytes(n, b, 0);
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:21          : }
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/Daisy.java:585           : if (offset + size > BLOCKSIZE) {
  daisy/Daisy.java:588           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:593           : if (!inode.used) {
  daisy/Daisy.java:597           : write(inode, offset, size, b);
  daisy/Daisy.java:423           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:424           : long blk = inode.blockno;
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:430           : if( inode.size < offset + size) {
  daisy/Daisy.java:434           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:435           : }
  daisy/Daisy.java:598           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:599           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/DaisyDir.java:123        : DaisyDir.writeLong(d.file.inodenum,
  daisy/DaisyDir.java:55         : byte b[] = new byte[8];
  daisy/DaisyDir.java:56         : Utility.longToBytes(n, b, 0);
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:21          : }
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/Daisy.java:585           : if (offset + size > BLOCKSIZE) {
  daisy/Daisy.java:588           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:593           : if (!inode.used) {
  daisy/Daisy.java:597           : write(inode, offset, size, b);
  daisy/Daisy.java:423           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:424           : long blk = inode.blockno;
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:430           : if( inode.size < offset + size) {
  daisy/Daisy.java:434           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:435           : }
  daisy/Daisy.java:598           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:599           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/DaisyDir.java:126        : DaisyDir.writeLong(d.file.inodenum,
  daisy/DaisyDir.java:129        : byte[] b = new byte[DirectoryEntry.MAXNAMESIZE];
  daisy/DaisyDir.java:130        : System.arraycopy(d.entries[i].filename, 0, b, 0, d.entries[i].filename.length);
      [2 insn w/o sources]
  daisy/DaisyDir.java:131        : DaisyDir.write(d.file,
  daisy/DaisyDir.java:290        : return Daisy.write(file.inodenum, offset, size, b);
  daisy/Daisy.java:585           : if (offset + size > BLOCKSIZE) {
  daisy/Daisy.java:588           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:593           : if (!inode.used) {
  daisy/Daisy.java:597           : write(inode, offset, size, b);
  daisy/Daisy.java:423           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:424           : long blk = inode.blockno;
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:430           : if( inode.size < offset + size) {
  daisy/Daisy.java:434           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:435           : }
  daisy/Daisy.java:598           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:599           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:290        : return Daisy.write(file.inodenum, offset, size, b);
  daisy/DaisyDir.java:131        : DaisyDir.write(d.file,
  daisy/DaisyDir.java:122        : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:136        : DaisyLock.unlock_file(d.file.inodenum);
  daisy/Daisy.java:188           : LockManager.rel(STARTFILELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
------------------------------------------------------ transition #53 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"RELEASE" ,2/2,isCascaded:false}
  daisy/Mutex.java:42            : }
  daisy/DaisyDir.java:137        : return Daisy.DAISY_ERR_OK;
  daisy/DaisyDir.java:259        : return DaisyDir.closeDirectory(d);
  DaisyUserThread.java:70        : int lookupStatus = DaisyDir.lookup(root, filenames[fileID], fh);
  DaisyUserThread.java:71        : assert (lookupStatus == Daisy.DAISY_ERR_OK) || (lookupStatus == Daisy.DAISY_ERR_NOENT);
  DaisyUserThread.java:73        : System.out.printf("Doing op %d on file %d, inode %d, status=%d\n",
  DaisyUserThread.java:74        : operation, fileID, fh.inodenum, lookupStatus);
      [2 insn w/o sources]
  DaisyUserThread.java:74        : operation, fileID, fh.inodenum, lookupStatus);
      [2 insn w/o sources]
  DaisyUserThread.java:74        : operation, fileID, fh.inodenum, lookupStatus);
      [2 insn w/o sources]
  DaisyUserThread.java:74        : operation, fileID, fh.inodenum, lookupStatus);
      [2 insn w/o sources]
  DaisyUserThread.java:74        : operation, fileID, fh.inodenum, lookupStatus);
  DaisyUserThread.java:73        : System.out.printf("Doing op %d on file %d, inode %d, status=%d\n",
      [2 insn w/o sources]
  DaisyUserThread.java:73        : System.out.printf("Doing op %d on file %d, inode %d, status=%d\n",
  DaisyUserThread.java:75        : switch(operation) {
  DaisyUserThread.java:112       : System.out.println("Deleting...");
      [2 insn w/o sources]
  DaisyUserThread.java:113       : status = DaisyDir.unlink(root, filenames[fileID]);
------------------------------------------------------ transition #54 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  DaisyUserThread.java:113       : status = DaisyDir.unlink(root, filenames[fileID]);
------------------------------------------------------ transition #55 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  DaisyUserThread.java:113       : status = DaisyDir.unlink(root, filenames[fileID]);
------------------------------------------------------ transition #56 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/2,isCascaded:false}
  DaisyUserThread.java:113       : status = DaisyDir.unlink(root, filenames[fileID]);
  daisy/DaisyDir.java:268        : Directory d = new Directory();
  daisy/DaisyDir.java:28         : class Directory {
      [1 insn w/o sources]
  daisy/DaisyDir.java:32         : public DirectoryEntry entries[] = new DirectoryEntry[DIRSIZE];
  daisy/DaisyDir.java:268        : Directory d = new Directory();
  daisy/DaisyDir.java:269        : int res = DaisyDir.openDirectory(dir, d);
  daisy/DaisyDir.java:85         : Attribute a = new Attribute();
  daisy/Attribute.java:15        : public class Attribute {
      [1 insn w/o sources]
  daisy/Attribute.java:15        : public class Attribute {
  daisy/DaisyDir.java:85         : Attribute a = new Attribute();
  daisy/DaisyDir.java:90         : DaisyLock.lock_file(dir.inodenum);
------------------------------------------------------ transition #57 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
  daisy/DaisyDir.java:90         : DaisyLock.lock_file(dir.inodenum);
  daisy/Daisy.java:178           : LockManager.acq(STARTFILELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #58 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #59 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #60 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #61 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #62 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #63 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #64 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #65 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #66 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,2/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #67 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #68 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #69 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,2/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #70 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,2/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #71 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
------------------------------------------------------ transition #72 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"RELEASE" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Mutex.java:33            : }
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #73 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:30            : this.wait();
      [1 insn w/o sources]
------------------------------------------------------ transition #74 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"WAIT" ,1/1,isCascaded:false}
  daisy/Mutex.java:36            : }
  daisy/DaisyDir.java:91         : d.file = dir;
  daisy/DaisyDir.java:92         : res = Daisy.get_attr(dir.inodenum, a);
  daisy/Daisy.java:523           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:527           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:527           : Inode inode = iget( inodenum );
  daisy/Daisy.java:528           : if (inode == null) {
  daisy/Daisy.java:531           : if (!inode.used) {
  daisy/Daisy.java:535           : get_attr(inode, a);
  daisy/Daisy.java:439           : a.size = inode.size;
  daisy/Daisy.java:440           : }
  daisy/Daisy.java:536           : DaisyLock.reli (inodenum);
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:537           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:92         : res = Daisy.get_attr(dir.inodenum, a);
  daisy/DaisyDir.java:93         : if (res != Daisy.DAISY_ERR_OK) {
  daisy/DaisyDir.java:97         : d.size = a.size / DirectoryEntry.ENTRYSIZE;
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:99         : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:100        : d.entries[i] = new DirectoryEntry();
  daisy/DaisyDir.java:15         : class DirectoryEntry {
      [1 insn w/o sources]
  daisy/DaisyDir.java:15         : class DirectoryEntry {
  daisy/DaisyDir.java:100        : d.entries[i] = new DirectoryEntry();
  daisy/DaisyDir.java:101        : d.entries[i].inodenum =
  daisy/DaisyDir.java:102        : DaisyDir.readLong(dir.inodenum, i * DirectoryEntry.ENTRYSIZE);
  daisy/DaisyDir.java:49         : byte b[] = new byte[8];
  daisy/DaisyDir.java:50         : int x = Daisy.read(inodenum, offset, 8, b);
  daisy/Daisy.java:564           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:569           : if (!inode.used) {
  daisy/Daisy.java:573           : read(inode, offset, size, b);
  daisy/Daisy.java:412           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:413           : long blk = inode.blockno;
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:418           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:419           : }
  daisy/Daisy.java:574           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:575           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:50         : int x = Daisy.read(inodenum, offset, 8, b);
  daisy/DaisyDir.java:51         : return Utility.bytesToLong(b, 0);
  daisy/Utility.java:24          : long n = 0;
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:28          : return n;
  daisy/DaisyDir.java:51         : return Utility.bytesToLong(b, 0);
  daisy/DaisyDir.java:102        : DaisyDir.readLong(dir.inodenum, i * DirectoryEntry.ENTRYSIZE);
  daisy/DaisyDir.java:104        : int namesize =
  daisy/DaisyDir.java:105        : (int) DaisyDir.readLong(dir.inodenum, i * DirectoryEntry.ENTRYSIZE + 8);
  daisy/DaisyDir.java:49         : byte b[] = new byte[8];
  daisy/DaisyDir.java:50         : int x = Daisy.read(inodenum, offset, 8, b);
  daisy/Daisy.java:564           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:569           : if (!inode.used) {
  daisy/Daisy.java:573           : read(inode, offset, size, b);
  daisy/Daisy.java:412           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:413           : long blk = inode.blockno;
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:418           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:419           : }
  daisy/Daisy.java:574           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:575           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:50         : int x = Daisy.read(inodenum, offset, 8, b);
  daisy/DaisyDir.java:51         : return Utility.bytesToLong(b, 0);
  daisy/Utility.java:24          : long n = 0;
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:28          : return n;
  daisy/DaisyDir.java:51         : return Utility.bytesToLong(b, 0);
  daisy/DaisyDir.java:105        : (int) DaisyDir.readLong(dir.inodenum, i * DirectoryEntry.ENTRYSIZE + 8);
  daisy/DaisyDir.java:106        : byte[] b = new byte[namesize];
  daisy/DaisyDir.java:107        : DaisyDir.read(dir, i * DirectoryEntry.ENTRYSIZE + 16, namesize, b);
  daisy/DaisyDir.java:297        : return Daisy.read(file.inodenum, offset, size, b);
  daisy/Daisy.java:564           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:569           : if (!inode.used) {
  daisy/Daisy.java:573           : read(inode, offset, size, b);
  daisy/Daisy.java:412           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:413           : long blk = inode.blockno;
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:418           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:419           : }
  daisy/Daisy.java:574           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:575           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:297        : return Daisy.read(file.inodenum, offset, size, b);
  daisy/DaisyDir.java:107        : DaisyDir.read(dir, i * DirectoryEntry.ENTRYSIZE + 16, namesize, b);
  daisy/DaisyDir.java:108        : d.entries[i].filename = b;
  daisy/DaisyDir.java:99         : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:110        : return Daisy.DAISY_ERR_OK;
  daisy/DaisyDir.java:269        : int res = DaisyDir.openDirectory(dir, d);
  daisy/DaisyDir.java:270        : if (res != Daisy.DAISY_ERR_OK) {
  daisy/DaisyDir.java:273        : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:274        : if (d.entries[i].inodenum != -1 &&
  daisy/DaisyDir.java:275        : names_equal(filename, d.entries[i].filename)) {
  daisy/DaisyDir.java:41         : if (a.length != b.length) return false;
  daisy/DaisyDir.java:42         : for (int i = 0; i < a.length; i++) {
  daisy/DaisyDir.java:43         : if (a[i] != b[i]) return false;
  daisy/DaisyDir.java:42         : for (int i = 0; i < a.length; i++) {
  daisy/DaisyDir.java:43         : if (a[i] != b[i]) return false;
  daisy/DaisyDir.java:42         : for (int i = 0; i < a.length; i++) {
  daisy/DaisyDir.java:43         : if (a[i] != b[i]) return false;
  daisy/DaisyDir.java:42         : for (int i = 0; i < a.length; i++) {
  daisy/DaisyDir.java:45         : return true;
  daisy/DaisyDir.java:275        : names_equal(filename, d.entries[i].filename)) {
  daisy/DaisyDir.java:276        : long t = d.entries[i].inodenum;
  daisy/DaisyDir.java:277        : d.entries[i].inodenum = -1;
  daisy/DaisyDir.java:278        : Daisy.unlink(t);
  daisy/Daisy.java:504           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:509           : Inode inode = iget(inodenum);
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:509           : Inode inode = iget(inodenum);
  daisy/Daisy.java:510           : if ( inode == null ) {
  daisy/Daisy.java:514           : inode.used = false;
  daisy/Daisy.java:515           : free( inode.blockno );
  daisy/Daisy.java:404           : DaisyLock.acqb(blockno);
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:405           : DaisyDisk.writeAllocBit( blockno, false );
  daisy/Daisy.java:262           : byte b = Petal.read( STARTALLOCAREA+blockno/8 );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:262           : byte b = Petal.read( STARTALLOCAREA+blockno/8 );
  daisy/Daisy.java:263           : byte mask = (byte)(1<<(blockno & 7));
  daisy/Daisy.java:264           : b = bit ? (byte)(b | mask) : (byte)(b & ~mask);
  daisy/Daisy.java:265           : Petal.write( STARTALLOCAREA+blockno/8, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:266           : } //@ nowarn Post
  daisy/Daisy.java:406           : DaisyLock.relb(blockno);
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:407           : }
  daisy/Daisy.java:516           : iput( inode );
  daisy/Daisy.java:326           : DaisyDisk.writei(inode);
  daisy/Daisy.java:238           : Petal.writeLong(STARTINODEAREA +
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:72            : }
  daisy/Daisy.java:240           : Petal.writeLong(STARTINODEAREA +
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:69            : write(n + i, (byte)(num & 0xff));
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Petal.java:70            : num = num >> 8;
  daisy/Petal.java:68            : for (int i = 0; i < 8; i++) {
  daisy/Petal.java:72            : }
  daisy/Daisy.java:242           : Petal.write(STARTINODEAREA +
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:245           : } //@ nowarn Post
  daisy/Daisy.java:327           : DaisyLock.reli(inode.inodenum);
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:328           : }
  daisy/Daisy.java:518           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:278        : Daisy.unlink(t);
  daisy/DaisyDir.java:279        : return DaisyDir.closeDirectory(d);
  daisy/DaisyDir.java:122        : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:123        : DaisyDir.writeLong(d.file.inodenum,
  daisy/DaisyDir.java:55         : byte b[] = new byte[8];
  daisy/DaisyDir.java:56         : Utility.longToBytes(n, b, 0);
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:21          : }
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/Daisy.java:585           : if (offset + size > BLOCKSIZE) {
  daisy/Daisy.java:588           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:593           : if (!inode.used) {
  daisy/Daisy.java:597           : write(inode, offset, size, b);
  daisy/Daisy.java:423           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:424           : long blk = inode.blockno;
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:430           : if( inode.size < offset + size) {
  daisy/Daisy.java:434           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:435           : }
  daisy/Daisy.java:598           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:599           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/DaisyDir.java:123        : DaisyDir.writeLong(d.file.inodenum,
  daisy/DaisyDir.java:55         : byte b[] = new byte[8];
  daisy/DaisyDir.java:56         : Utility.longToBytes(n, b, 0);
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:21          : }
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/Daisy.java:585           : if (offset + size > BLOCKSIZE) {
  daisy/Daisy.java:588           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:593           : if (!inode.used) {
  daisy/Daisy.java:597           : write(inode, offset, size, b);
  daisy/Daisy.java:423           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:424           : long blk = inode.blockno;
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:430           : if( inode.size < offset + size) {
  daisy/Daisy.java:434           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:435           : }
  daisy/Daisy.java:598           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:599           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/DaisyDir.java:126        : DaisyDir.writeLong(d.file.inodenum,
  daisy/DaisyDir.java:129        : byte[] b = new byte[DirectoryEntry.MAXNAMESIZE];
  daisy/DaisyDir.java:130        : System.arraycopy(d.entries[i].filename, 0, b, 0, d.entries[i].filename.length);
      [2 insn w/o sources]
  daisy/DaisyDir.java:131        : DaisyDir.write(d.file,
  daisy/DaisyDir.java:290        : return Daisy.write(file.inodenum, offset, size, b);
  daisy/Daisy.java:585           : if (offset + size > BLOCKSIZE) {
  daisy/Daisy.java:588           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:593           : if (!inode.used) {
  daisy/Daisy.java:597           : write(inode, offset, size, b);
  daisy/Daisy.java:423           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [13 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [13 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:424           : long blk = inode.blockno;
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:430           : if( inode.size < offset + size) {
  daisy/Daisy.java:434           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:435           : }
  daisy/Daisy.java:598           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:599           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:290        : return Daisy.write(file.inodenum, offset, size, b);
  daisy/DaisyDir.java:131        : DaisyDir.write(d.file,
  daisy/DaisyDir.java:122        : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:136        : DaisyLock.unlock_file(d.file.inodenum);
  daisy/Daisy.java:188           : LockManager.rel(STARTFILELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [13 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
------------------------------------------------------ transition #75 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"RELEASE" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Mutex.java:33            : }
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #76 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #77 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/DaisyDir.java:91         : d.file = dir;
  daisy/DaisyDir.java:92         : res = Daisy.get_attr(dir.inodenum, a);
------------------------------------------------------ transition #78 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/DaisyDir.java:92         : res = Daisy.get_attr(dir.inodenum, a);
  daisy/Daisy.java:523           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:527           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #79 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #80 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #81 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #82 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #83 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #84 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #85 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #86 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #87 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #88 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #89 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #90 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #91 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #92 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #93 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #94 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #95 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #96 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #97 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #98 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #99 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #100 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #101 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #102 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #103 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #104 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #105 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #106 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #107 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #108 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #109 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #110 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #111 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #112 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #113 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #114 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #115 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #116 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #117 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #118 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #119 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #120 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #121 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #122 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #123 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #124 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #125 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #126 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #127 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #128 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #129 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #130 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #131 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #132 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #133 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #134 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #135 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #136 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #137 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #138 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #139 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #140 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #141 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #142 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #143 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #144 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #145 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:527           : Inode inode = iget( inodenum );
  daisy/Daisy.java:528           : if (inode == null) {
  daisy/Daisy.java:531           : if (!inode.used) {
  daisy/Daisy.java:535           : get_attr(inode, a);
  daisy/Daisy.java:439           : a.size = inode.size;
  daisy/Daisy.java:440           : }
  daisy/Daisy.java:536           : DaisyLock.reli (inodenum);
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #146 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #147 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #148 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #149 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #150 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #151 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #152 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:537           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:92         : res = Daisy.get_attr(dir.inodenum, a);
  daisy/DaisyDir.java:93         : if (res != Daisy.DAISY_ERR_OK) {
  daisy/DaisyDir.java:97         : d.size = a.size / DirectoryEntry.ENTRYSIZE;
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:98         : System.out.println("Size of directory = " + d.size);
      [2 insn w/o sources]
  daisy/DaisyDir.java:99         : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:100        : d.entries[i] = new DirectoryEntry();
  daisy/DaisyDir.java:15         : class DirectoryEntry {
      [1 insn w/o sources]
  daisy/DaisyDir.java:15         : class DirectoryEntry {
  daisy/DaisyDir.java:100        : d.entries[i] = new DirectoryEntry();
  daisy/DaisyDir.java:101        : d.entries[i].inodenum =
------------------------------------------------------ transition #153 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/DaisyDir.java:101        : d.entries[i].inodenum =
  daisy/DaisyDir.java:102        : DaisyDir.readLong(dir.inodenum, i * DirectoryEntry.ENTRYSIZE);
  daisy/DaisyDir.java:49         : byte b[] = new byte[8];
  daisy/DaisyDir.java:50         : int x = Daisy.read(inodenum, offset, 8, b);
  daisy/Daisy.java:564           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #154 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #155 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #156 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #157 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #158 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #159 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #160 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #161 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #162 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #163 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #164 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #165 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #166 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #167 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #168 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #169 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #170 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #171 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #172 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #173 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #174 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #175 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #176 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #177 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #178 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #179 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #180 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #181 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #182 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #183 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #184 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #185 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #186 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #187 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #188 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #189 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #190 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #191 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #192 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #193 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #194 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #195 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #196 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #197 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #198 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #199 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #200 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #201 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #202 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #203 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #204 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #205 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #206 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #207 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #208 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #209 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #210 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #211 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #212 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #213 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #214 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #215 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #216 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #217 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #218 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #219 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #220 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:569           : if (!inode.used) {
  daisy/Daisy.java:573           : read(inode, offset, size, b);
  daisy/Daisy.java:412           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #221 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #222 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #223 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #224 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #225 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #226 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #227 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #228 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #229 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #230 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #231 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #232 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #233 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #234 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #235 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #236 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:413           : long blk = inode.blockno;
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #237 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #238 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #239 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #240 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #241 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #242 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #243 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #244 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #245 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #246 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #247 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #248 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #249 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #250 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #251 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #252 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #253 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #254 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #255 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #256 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #257 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #258 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #259 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #260 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:418           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #261 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #262 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #263 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #264 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #265 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #266 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #267 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:419           : }
  daisy/Daisy.java:574           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #268 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #269 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #270 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #271 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #272 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #273 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #274 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:575           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:50         : int x = Daisy.read(inodenum, offset, 8, b);
  daisy/DaisyDir.java:51         : return Utility.bytesToLong(b, 0);
  daisy/Utility.java:24          : long n = 0;
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:28          : return n;
  daisy/DaisyDir.java:51         : return Utility.bytesToLong(b, 0);
  daisy/DaisyDir.java:102        : DaisyDir.readLong(dir.inodenum, i * DirectoryEntry.ENTRYSIZE);
  daisy/DaisyDir.java:104        : int namesize =
------------------------------------------------------ transition #275 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/DaisyDir.java:104        : int namesize =
  daisy/DaisyDir.java:105        : (int) DaisyDir.readLong(dir.inodenum, i * DirectoryEntry.ENTRYSIZE + 8);
  daisy/DaisyDir.java:49         : byte b[] = new byte[8];
  daisy/DaisyDir.java:50         : int x = Daisy.read(inodenum, offset, 8, b);
  daisy/Daisy.java:564           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #276 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #277 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #278 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #279 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #280 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #281 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #282 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #283 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #284 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #285 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #286 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #287 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #288 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #289 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #290 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #291 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #292 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #293 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #294 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #295 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #296 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #297 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #298 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #299 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #300 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #301 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #302 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #303 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #304 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #305 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #306 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #307 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #308 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #309 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #310 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #311 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #312 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #313 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #314 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #315 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #316 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #317 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #318 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #319 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #320 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #321 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #322 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #323 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #324 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #325 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #326 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #327 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #328 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #329 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #330 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #331 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #332 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #333 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #334 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #335 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #336 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #337 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #338 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #339 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #340 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #341 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #342 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:569           : if (!inode.used) {
  daisy/Daisy.java:573           : read(inode, offset, size, b);
  daisy/Daisy.java:412           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #343 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #344 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #345 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #346 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #347 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #348 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #349 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #350 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #351 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #352 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #353 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #354 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #355 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #356 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #357 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #358 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:413           : long blk = inode.blockno;
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #359 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #360 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #361 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #362 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #363 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #364 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #365 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #366 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #367 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #368 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #369 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #370 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #371 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #372 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #373 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #374 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #375 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #376 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #377 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #378 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #379 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #380 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #381 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #382 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:418           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #383 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #384 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #385 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #386 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #387 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #388 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #389 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:419           : }
  daisy/Daisy.java:574           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #390 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #391 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #392 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #393 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #394 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #395 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #396 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:575           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:50         : int x = Daisy.read(inodenum, offset, 8, b);
  daisy/DaisyDir.java:51         : return Utility.bytesToLong(b, 0);
  daisy/Utility.java:24          : long n = 0;
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:26          : n = (n << 8) + (b[offset + i] & 0xff);
  daisy/Utility.java:25          : for (int i = 7; i >= 0; i--) {
  daisy/Utility.java:28          : return n;
  daisy/DaisyDir.java:51         : return Utility.bytesToLong(b, 0);
  daisy/DaisyDir.java:105        : (int) DaisyDir.readLong(dir.inodenum, i * DirectoryEntry.ENTRYSIZE + 8);
  daisy/DaisyDir.java:106        : byte[] b = new byte[namesize];
  daisy/DaisyDir.java:107        : DaisyDir.read(dir, i * DirectoryEntry.ENTRYSIZE + 16, namesize, b);
  daisy/DaisyDir.java:297        : return Daisy.read(file.inodenum, offset, size, b);
------------------------------------------------------ transition #397 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/DaisyDir.java:297        : return Daisy.read(file.inodenum, offset, size, b);
  daisy/Daisy.java:564           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #398 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #399 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #400 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #401 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #402 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #403 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #404 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #405 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #406 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #407 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #408 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #409 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #410 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #411 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #412 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #413 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #414 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #415 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #416 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #417 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #418 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #419 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #420 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #421 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #422 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #423 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #424 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #425 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #426 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #427 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #428 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #429 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #430 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #431 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #432 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #433 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #434 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #435 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #436 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #437 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #438 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #439 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #440 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #441 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #442 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #443 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #444 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #445 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #446 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #447 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #448 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #449 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #450 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #451 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #452 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #453 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #454 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #455 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #456 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #457 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #458 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #459 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #460 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #461 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #462 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #463 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #464 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:569           : if (!inode.used) {
  daisy/Daisy.java:573           : read(inode, offset, size, b);
  daisy/Daisy.java:412           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #465 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #466 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #467 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #468 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #469 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #470 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #471 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #472 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #473 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #474 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #475 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #476 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #477 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #478 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #479 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #480 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:413           : long blk = inode.blockno;
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #481 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #482 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #483 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #484 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #485 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #486 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #487 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #488 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #489 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:418           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #490 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #491 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #492 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #493 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #494 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #495 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #496 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:419           : }
  daisy/Daisy.java:574           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #497 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #498 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #499 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #500 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #501 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #502 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #503 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:575           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:297        : return Daisy.read(file.inodenum, offset, size, b);
  daisy/DaisyDir.java:107        : DaisyDir.read(dir, i * DirectoryEntry.ENTRYSIZE + 16, namesize, b);
  daisy/DaisyDir.java:108        : d.entries[i].filename = b;
  daisy/DaisyDir.java:99         : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:110        : return Daisy.DAISY_ERR_OK;
  daisy/DaisyDir.java:251        : int res = DaisyDir.openDirectory(dir, d);
  daisy/DaisyDir.java:252        : if (res != Daisy.DAISY_ERR_OK) {
  daisy/DaisyDir.java:255        : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:256        : if (d.entries[i].inodenum != -1 &&
  daisy/DaisyDir.java:255        : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:262        : DaisyDir.closeDirectory(d);
  daisy/DaisyDir.java:122        : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:123        : DaisyDir.writeLong(d.file.inodenum,
------------------------------------------------------ transition #504 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/DaisyDir.java:123        : DaisyDir.writeLong(d.file.inodenum,
  daisy/DaisyDir.java:55         : byte b[] = new byte[8];
  daisy/DaisyDir.java:56         : Utility.longToBytes(n, b, 0);
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:21          : }
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/Daisy.java:585           : if (offset + size > BLOCKSIZE) {
  daisy/Daisy.java:588           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #505 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #506 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #507 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #508 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #509 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #510 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #511 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #512 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #513 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #514 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #515 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #516 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #517 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #518 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #519 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #520 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #521 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #522 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #523 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #524 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #525 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #526 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #527 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #528 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #529 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #530 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #531 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #532 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #533 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #534 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #535 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #536 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #537 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #538 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #539 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #540 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #541 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #542 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #543 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #544 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #545 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #546 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #547 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #548 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #549 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #550 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #551 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #552 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #553 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #554 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #555 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #556 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #557 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #558 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #559 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #560 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #561 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #562 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #563 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #564 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #565 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #566 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #567 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #568 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #569 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #570 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #571 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:593           : if (!inode.used) {
  daisy/Daisy.java:597           : write(inode, offset, size, b);
  daisy/Daisy.java:423           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #572 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #573 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #574 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #575 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #576 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #577 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #578 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #579 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #580 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #581 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #582 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #583 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #584 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #585 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #586 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #587 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:424           : long blk = inode.blockno;
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #588 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #589 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #590 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #591 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #592 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #593 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #594 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #595 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #596 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #597 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #598 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #599 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #600 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #601 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #602 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #603 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #604 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #605 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #606 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #607 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #608 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #609 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #610 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #611 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:430           : if( inode.size < offset + size) {
  daisy/Daisy.java:434           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #612 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #613 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #614 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #615 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #616 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #617 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #618 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:435           : }
  daisy/Daisy.java:598           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #619 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #620 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #621 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #622 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #623 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #624 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #625 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:599           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/DaisyDir.java:123        : DaisyDir.writeLong(d.file.inodenum,
------------------------------------------------------ transition #626 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/DaisyDir.java:126        : DaisyDir.writeLong(d.file.inodenum,
  daisy/DaisyDir.java:55         : byte b[] = new byte[8];
  daisy/DaisyDir.java:56         : Utility.longToBytes(n, b, 0);
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:18          : b[offset + i] = (byte)(n & 0xff);
  daisy/Utility.java:19          : n = n >> 8;
  daisy/Utility.java:17          : for (int i = 0; i < 8; i++) {
  daisy/Utility.java:21          : }
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/Daisy.java:585           : if (offset + size > BLOCKSIZE) {
  daisy/Daisy.java:588           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #627 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #628 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #629 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #630 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #631 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #632 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #633 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #634 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #635 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #636 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #637 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #638 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #639 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #640 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #641 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #642 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #643 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #644 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #645 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #646 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #647 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #648 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #649 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #650 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #651 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #652 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #653 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #654 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #655 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #656 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #657 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #658 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #659 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #660 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #661 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #662 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #663 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #664 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #665 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #666 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #667 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #668 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #669 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #670 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #671 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #672 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #673 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #674 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #675 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #676 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #677 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #678 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #679 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #680 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #681 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #682 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #683 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #684 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #685 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #686 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #687 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #688 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #689 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #690 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #691 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #692 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #693 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:593           : if (!inode.used) {
  daisy/Daisy.java:597           : write(inode, offset, size, b);
  daisy/Daisy.java:423           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #694 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #695 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #696 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #697 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #698 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #699 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #700 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #701 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #702 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #703 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #704 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #705 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #706 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #707 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #708 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #709 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:424           : long blk = inode.blockno;
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #710 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #711 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #712 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #713 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #714 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #715 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #716 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #717 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #718 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #719 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #720 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #721 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #722 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #723 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #724 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #725 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #726 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #727 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #728 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #729 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #730 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #731 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #732 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #733 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:430           : if( inode.size < offset + size) {
  daisy/Daisy.java:434           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #734 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #735 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #736 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #737 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #738 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #739 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #740 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:435           : }
  daisy/Daisy.java:598           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #741 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #742 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #743 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #744 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #745 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #746 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #747 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:599           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:57         : return Daisy.write(inodenum, offset, 8, b);
  daisy/DaisyDir.java:126        : DaisyDir.writeLong(d.file.inodenum,
  daisy/DaisyDir.java:129        : byte[] b = new byte[DirectoryEntry.MAXNAMESIZE];
  daisy/DaisyDir.java:130        : System.arraycopy(d.entries[i].filename, 0, b, 0, d.entries[i].filename.length);
      [2 insn w/o sources]
  daisy/DaisyDir.java:131        : DaisyDir.write(d.file,
  daisy/DaisyDir.java:290        : return Daisy.write(file.inodenum, offset, size, b);
------------------------------------------------------ transition #748 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/DaisyDir.java:290        : return Daisy.write(file.inodenum, offset, size, b);
  daisy/Daisy.java:585           : if (offset + size > BLOCKSIZE) {
  daisy/Daisy.java:588           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #749 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #750 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #751 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #752 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #753 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #754 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #755 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #756 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #757 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #758 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #759 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #760 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #761 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #762 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #763 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #764 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #765 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #766 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #767 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #768 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #769 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #770 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #771 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #772 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #773 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #774 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #775 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #776 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #777 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #778 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #779 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #780 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #781 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #782 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #783 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #784 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #785 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #786 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #787 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #788 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #789 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #790 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #791 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #792 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #793 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #794 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #795 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #796 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #797 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #798 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #799 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #800 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #801 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #802 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #803 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #804 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #805 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #806 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #807 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #808 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #809 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #810 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #811 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #812 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #813 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #814 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #815 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:592           : Inode inode = iget( inodenum );
  daisy/Daisy.java:593           : if (!inode.used) {
  daisy/Daisy.java:597           : write(inode, offset, size, b);
  daisy/Daisy.java:423           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #816 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #817 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #818 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #819 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #820 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #821 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #822 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #823 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #824 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #825 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #826 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #827 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #828 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #829 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #830 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #831 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:424           : long blk = inode.blockno;
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #832 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #833 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #834 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #835 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #836 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #837 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #838 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #839 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #840 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #841 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #842 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #843 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #844 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #845 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #846 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #847 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #848 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #849 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #850 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #851 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #852 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:427           : DaisyDisk.writeBlockByte( blk, offset + i, b[i]);
  daisy/Daisy.java:284           : Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );
  daisy/Petal.java:31            : int iLoc = (int)n;
  daisy/Petal.java:32            : while(iLoc > disk.length) {
------------------------------------------------------ transition #853 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:32            : while(iLoc > disk.length) {
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #854 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
------------------------------------------------------ transition #855 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:35            : disk[iLoc] = b;
  daisy/Petal.java:36            : }
  daisy/Daisy.java:285           : } //@ nowarn Post
  daisy/Daisy.java:426           : for (i = 0; i < size; i++) {
  daisy/Daisy.java:430           : if( inode.size < offset + size) {
  daisy/Daisy.java:434           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #856 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #857 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #858 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #859 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #860 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #861 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #862 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:435           : }
  daisy/Daisy.java:598           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #863 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #864 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #865 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #866 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #867 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #868 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #869 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:599           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:290        : return Daisy.write(file.inodenum, offset, size, b);
  daisy/DaisyDir.java:131        : DaisyDir.write(d.file,
  daisy/DaisyDir.java:122        : for (int i = 0; i < d.size; i++) {
  daisy/DaisyDir.java:136        : DaisyLock.unlock_file(d.file.inodenum);
------------------------------------------------------ transition #870 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/DaisyDir.java:136        : DaisyLock.unlock_file(d.file.inodenum);
  daisy/Daisy.java:188           : LockManager.rel(STARTFILELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #871 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #872 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #873 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #874 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #875 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #876 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #877 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/DaisyDir.java:137        : return Daisy.DAISY_ERR_OK;
  daisy/DaisyDir.java:262        : DaisyDir.closeDirectory(d);
  daisy/DaisyDir.java:263        : return Daisy.DAISY_ERR_NOENT;
  DaisyUserThread.java:70        : int lookupStatus = DaisyDir.lookup(root, filenames[fileID], fh);
  DaisyUserThread.java:71        : assert (lookupStatus == Daisy.DAISY_ERR_OK) || (lookupStatus == Daisy.DAISY_ERR_NOENT);
  DaisyUserThread.java:73        : System.out.printf("Doing op %d on file %d, inode %d, status=%d\n",
  DaisyUserThread.java:74        : operation, fileID, fh.inodenum, lookupStatus);
      [2 insn w/o sources]
  DaisyUserThread.java:74        : operation, fileID, fh.inodenum, lookupStatus);
      [2 insn w/o sources]
  DaisyUserThread.java:74        : operation, fileID, fh.inodenum, lookupStatus);
      [2 insn w/o sources]
  DaisyUserThread.java:74        : operation, fileID, fh.inodenum, lookupStatus);
      [2 insn w/o sources]
  DaisyUserThread.java:74        : operation, fileID, fh.inodenum, lookupStatus);
  DaisyUserThread.java:73        : System.out.printf("Doing op %d on file %d, inode %d, status=%d\n",
      [2 insn w/o sources]
  DaisyUserThread.java:73        : System.out.printf("Doing op %d on file %d, inode %d, status=%d\n",
  DaisyUserThread.java:75        : switch(operation) {
  DaisyUserThread.java:77        : System.out.println("Reading...");
      [2 insn w/o sources]
  DaisyUserThread.java:78        : int size = 1;
  DaisyUserThread.java:79        : contents = new byte[size];
  DaisyUserThread.java:80        : offset = 0;
  DaisyUserThread.java:81        : status = DaisyDir.read(fh, offset, size, contents);
  daisy/DaisyDir.java:297        : return Daisy.read(file.inodenum, offset, size, b);
  daisy/Daisy.java:564           : if (inodenum < 0 || inodenum >= MAXINODE) {
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:82            : class Inode {
      [1 insn w/o sources]
  daisy/Daisy.java:82            : class Inode {
  daisy/Daisy.java:317           : Inode p = new Inode();
  daisy/Daisy.java:318           : DaisyLock.acqi(inodenum);
  daisy/Daisy.java:129           : LockManager.acq(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #878 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #879 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #880 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #881 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #882 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #883 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #884 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #885 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #886 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #887 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #888 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #889 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #890 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #891 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #892 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #893 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:130           : } // nowarn Post
  daisy/Daisy.java:319           : DaisyDisk.readi(inodenum, p);
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #894 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #895 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #896 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #897 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #898 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #899 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #900 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #901 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #902 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #903 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #904 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #905 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #906 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #907 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #908 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #909 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #910 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #911 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #912 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #913 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #914 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #915 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #916 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #917 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:221           : i.blockno = Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Petal.java:75            : long num = 0;
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #918 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #919 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #920 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #921 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #922 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #923 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #924 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #925 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #926 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #927 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #928 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #929 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #930 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #931 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #932 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #933 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #934 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #935 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #936 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #937 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #938 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #939 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #940 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #941 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Petal.java:77            : byte x = read (n + i);
  daisy/Petal.java:78            : num = (num << 8) + (x & 0xff);
  daisy/Petal.java:76            : for (int i = 7; i >= 0; i--) {
  daisy/Petal.java:80            : return num;
  daisy/Daisy.java:223           : i.size= Petal.readLong(STARTINODEAREA +
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #942 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #943 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #944 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:225           : i.used = Petal.read(STARTINODEAREA +
  daisy/Daisy.java:227           : i.inodenum = inodenum;
  daisy/Daisy.java:229           : } //@ nowarn Post
  daisy/Daisy.java:320           : return p;
  daisy/Daisy.java:568           : Inode inode = iget( inodenum );
  daisy/Daisy.java:569           : if (!inode.used) {
  daisy/Daisy.java:573           : read(inode, offset, size, b);
  daisy/Daisy.java:412           : DaisyLock.acqb( inode.blockno );
  daisy/Daisy.java:153           : LockManager.acq(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #945 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #946 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [2 insn w/o sources]
------------------------------------------------------ transition #947 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #948 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
------------------------------------------------------ transition #949 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
      [3 insn w/o sources]
------------------------------------------------------ transition #950 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #951 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #952 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:57            : if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #953 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #954 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
      [3 insn w/o sources]
------------------------------------------------------ transition #955 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #956 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #957 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
------------------------------------------------------ transition #958 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:67            : ((Mutex)plocks.get((int)lockno)).acq();
  daisy/Mutex.java:28            : while (locked) {
------------------------------------------------------ transition #959 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:28            : while (locked) {
  daisy/Mutex.java:35            : locked = true;
------------------------------------------------------ transition #960 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:35            : locked = true;
  daisy/Mutex.java:36            : }
  daisy/Daisy.java:154           : } // nowarn Post
  daisy/Daisy.java:413           : long blk = inode.blockno;
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Petal.java:60            : int iLoc = (int)n;
  daisy/Petal.java:61            : while(iLoc > disk.length) {
------------------------------------------------------ transition #961 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:61            : while(iLoc > disk.length) {
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #962 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
------------------------------------------------------ transition #963 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
  daisy/Petal.java:64            : return disk[iLoc];
  daisy/Daisy.java:275           : return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );
  daisy/Daisy.java:416           : b[i] = DaisyDisk.readBlockByte( blk, offset + i );
  daisy/Daisy.java:415           : for (i = 0; i < size && (offset + i < inode.size); i++) {
  daisy/Daisy.java:418           : DaisyLock.relb( inode.blockno );
  daisy/Daisy.java:163           : LockManager.rel(STARTBLOCKLOCKAREA+blockno);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #964 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #965 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #966 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #967 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #968 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #969 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #970 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:164           : } // nowarn Post
  daisy/Daisy.java:419           : }
  daisy/Daisy.java:574           : DaisyLock.reli( inode.inodenum );
  daisy/Daisy.java:139           : LockManager.rel(STARTINODELOCKAREA+inodenum);
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #971 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_CLASS" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #972 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
      [3 insn w/o sources]
------------------------------------------------------ transition #973 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [7 insn w/o sources]
------------------------------------------------------ transition #974 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
------------------------------------------------------ transition #975 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_ARRAY" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
------------------------------------------------------ transition #976 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
  daisy/Daisy.java:77            : ((Mutex)plocks.get((int)lockno)).rel();
  daisy/Mutex.java:40            : locked = false;
------------------------------------------------------ transition #977 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  daisy/Mutex.java:40            : locked = false;
  daisy/Mutex.java:41            : this.notify();
      [2 insn w/o sources]
  daisy/Mutex.java:42            : }
  daisy/Daisy.java:140           : } // nowarn Post
  daisy/Daisy.java:575           : return DAISY_ERR_OK;
  daisy/DaisyDir.java:297        : return Daisy.read(file.inodenum, offset, size, b);
  DaisyUserThread.java:81        : status = DaisyDir.read(fh, offset, size, contents);
  DaisyUserThread.java:82        : if(lookupStatus != Daisy.DAISY_ERR_OK) {
  DaisyUserThread.java:83        : assert status == Daisy.DAISY_ERR_BADHANDLE;
      [24 insn w/o sources]

====================================================== snapshot #1
thread java.lang.Thread:{id:0,name:main,status:WAITING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  waiting on: DaisyUserThread@1e9
  call stack:
	at java.lang.Thread.join(Thread.java)
	at DaisyTest.main(DaisyTest.java:55)

thread DaisyUserThread:{id:1,name:Thread-1,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at DaisyUserThread.run(DaisyUserThread.java:83)

thread DaisyUserThread:{id:2,name:Thread-2,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at daisy.Mutex.rel(Mutex.java:42)
	at daisy.LockManager.rel(Daisy.java:77)
	at daisy.DaisyLock.unlock_file(Daisy.java:188)
	at daisy.DaisyDir.closeDirectory(DaisyDir.java:136)
	at daisy.DaisyDir.unlink(DaisyDir.java:279)
	at DaisyUserThread.run(DaisyUserThread.java:113)


====================================================== output #1
Size of directory = 0
Creating the DaisyUserThreads ...
Starting the DaisyUserThreads ...
Size of directory = 1
Doing op 3 on file 0, inode 1, status=0
Deleting...
Size of directory = 1
Size of directory = 1
Doing op 0 on file 0, inode 0, status=-2
Reading...

====================================================== results
error #1: gov.nasa.jpf.vm.NoUncaughtExceptionsProperty "java.lang.AssertionError  at DaisyUserThread.run(D..."

====================================================== statistics
elapsed time:       00:00:11
states:             new=79393,visited=73484,backtracked=151899,end=1
search:             maxDepth=1000,constraints=785
choice generators:  thread=78969 (signal=1820,lock=12931,sharedRef=49155,threadApi=142,reschedule=14921), data=0
heap:               new=542404,released=27695,maxLive=1009,gcCycles=129859
instructions:       10595045
max memory:         488MB
loaded code:        classes=90,methods=1942

====================================================== search finished: 5/16/21 2:57 PM
